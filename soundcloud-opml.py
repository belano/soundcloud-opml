#!/usr/bin/env python

import argparse
import configparser
import os
import sys
import time
import soundcloud

from xml.etree import ElementTree as ET
from xml.etree.ElementTree import Element, SubElement, Comment
from xml.dom import minidom
import datetime


soundcloud_client = None
soundcloud_api_key = ''
path = ''
playlists = []


def main():
    """
    Main function
    """
    print("soundcloud-opml")

    global soundcloud_api_key, path

    # import configuration file
    get_config()

    # parse arguments
    parser = argparse.ArgumentParser()
    parser.add_argument("-k", "--key", help="soundcloud client id")
    parser.add_argument("-p", "--path", help="use a custom path this time")
    args = parser.parse_args()

    if args.key:
        print("using cli argument provided key %s " % args.key)
        soundcloud_api_key = args.key

    if args.path:
        if os.path.exists(args.path):
            print("using cli argument provided path %s " % args.path)
            os.chdir(args.path)
        else:
            print('Invalid path in option...')
            sys.exit()

    # setup soundcloud client
    setup_client()

    generated_on = str(datetime.datetime.now())

    # Configure one attribute with set()
    root = Element('opml')
    root.set('version', '1.1')
    root.append(Comment('OPML generated by soundcloud-opml'))

    head = SubElement(root, 'head')
    title = SubElement(head, 'title')
    title.text = 'My Faves'
    dc = SubElement(head, 'dateCreated')
    dc.text = generated_on
    dm = SubElement(head, 'dateModified')
    dm.text = generated_on

    body = SubElement(root, 'body')
    # Start a main group
    main_group = SubElement(body, 'outline', {'text': 'Faves on soundcloud',
                                              'title': 'Faves on soundcloud'})

    for playlist_key, playlist_url in playlists:
        print("key %s playlist-url %s" % (playlist_key, playlist_url))
        current_playlist = parse_url(playlist_url)
        if current_playlist:
            # Start a new group for each playlist
            current_group = SubElement(main_group, 'outline',
                                       {'text': current_playlist.title})
            count = 0
            for track_raw in current_playlist.tracks:
                track_title = track_raw['title']
                track_artwork_url = track_raw['artwork_url']
                track_stream_url = track_raw['stream_url'] \
                                   + "?client_id=" + soundcloud_api_key
                count += 1
                print('Track nÂ°%d - %s - %s - %s' % (count, track_title,
                                                     track_artwork_url, track_stream_url))
                # Add this track to the group setting all of its attributes at once.
                track = SubElement(current_group, 'outline',
                                     {'text': track_title,
                                      'title': track_title,
                                      'type': 'audio',
                                      'URL': track_stream_url
                                      })
                # Add artwork if present
                if track_artwork_url:
                    track.set('icon', track_artwork_url)

    # print(prettify(root))

    # format faves_20100121.opml
    today = datetime.datetime.now().isoformat(' ')[:10].replace('-', '')
    filename = 'faves_' + today + '.opml'
    filename_path = os.path.join(path, filename)

    # wrap it in an ElementTree instance, and save as XML
    tree = ET.ElementTree(root)
    tree.write(filename_path)


def prettify(elem):
    """
    Return a pretty-printed XML string for the Element.
    http://renesd.blogspot.com/2007/05/pretty-print-xml-with-python.html
    """
    rough_string = ET.tostring(elem, 'utf-8')
    reparsed = minidom.parseString(rough_string)
    return reparsed.toprettyxml(indent="  ")


def setup_client():
    global soundcloud_client
    soundcloud_client = soundcloud.Client(client_id=soundcloud_api_key)


def get_config():
    """
    read api key & path where to store the output opml file
    """
    global soundcloud_api_key, path, playlists
    config = configparser.ConfigParser()
    config.read(os.path.join(os.path.expanduser('~'), '.config/soundcloud-opml/scopml.cfg'))
    try:
        soundcloud_api_key = config['scopml']['api_key']
        path = config['scopml']['path']
        playlists = config.items('playlists')
    except:
        print('Are you sure scopml.cfg is in $HOME/.config/soundcloud-opml/ ?')
        sys.exit()

    if os.path.exists(path):
        os.chdir(path)
    else:
        print('Invalid path in scopml.cfg...')
        sys.exit()


def parse_url(track_url):
    item = get_item(track_url)
    if not item:
        return
    elif item.kind == 'playlist':
        print("Found a playlist")
        return item
    else:
        print("Not supported type %s" % item.kind)


def get_item(track_url):
    """
    Fetches metadata for a playlist
    """
    try:
        item = soundcloud_client.get('/resolve', url=track_url)
    except Exception:
        print('Error resolving url, retrying...')
        time.sleep(5)
        try:
            item = soundcloud_client.get('/resolve', url=track_url)
        except Exception as e:
            print("Could not resolve url " + track_url)
            print(e)
            sys.exit(0)
    return item

if __name__ == "__main__":
    main()
